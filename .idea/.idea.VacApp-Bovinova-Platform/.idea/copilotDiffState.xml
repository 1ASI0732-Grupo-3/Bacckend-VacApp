<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/VacApp-Bovinova-Platform/Program.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/VacApp-Bovinova-Platform/Program.cs" />
              <option name="originalContent" value="using Microsoft.EntityFrameworkCore;&#10;using Microsoft.AspNetCore.Authentication.JwtBearer;&#10;using Microsoft.IdentityModel.Tokens;&#10;using System.Text;&#10;using Microsoft.OpenApi.Models;&#10;using VacApp_Bovinova_Platform.CampaignManagement.Application.Internal.CommandServices;&#10;using VacApp_Bovinova_Platform.CampaignManagement.Application.Internal.QueryServices;&#10;using VacApp_Bovinova_Platform.CampaignManagement.Domain.Repositories;&#10;using VacApp_Bovinova_Platform.CampaignManagement.Domain.Services;&#10;using VacApp_Bovinova_Platform.CampaignManagement.Infrastructure.Repositories;&#10;using VacApp_Bovinova_Platform.IAM.Application.CommandServices;&#10;using VacApp_Bovinova_Platform.IAM.Application.OutBoundServices;&#10;using VacApp_Bovinova_Platform.IAM.Application.QueryServices;&#10;using VacApp_Bovinova_Platform.IAM.Domain.Repositories;&#10;using VacApp_Bovinova_Platform.IAM.Domain.Services;&#10;using VacApp_Bovinova_Platform.IAM.Infrastructure.Hashing.BCrypt.Services;&#10;using VacApp_Bovinova_Platform.IAM.Infrastructure.Repositories;&#10;using VacApp_Bovinova_Platform.IAM.Infrastructure.Tokens.JWT.Configuration;&#10;using VacApp_Bovinova_Platform.IAM.Infrastructure.Tokens.JWT.Services;&#10;using VacApp_Bovinova_Platform.RanchManagement.Application.Internal.CommandServices;&#10;using VacApp_Bovinova_Platform.RanchManagement.Application.Internal.QueryServices;&#10;using VacApp_Bovinova_Platform.RanchManagement.Domain.Repositories;&#10;using VacApp_Bovinova_Platform.RanchManagement.Domain.Services;&#10;using VacApp_Bovinova_Platform.RanchManagement.Infrastructure.Persistence.EFC.Repositories;&#10;using VacApp_Bovinova_Platform.Shared.Application.OutboundServices;&#10;using VacApp_Bovinova_Platform.Shared.Domain.Repositories;&#10;using VacApp_Bovinova_Platform.Shared.Infrastructure.Interfaces.ASAP.Configuration;&#10;using VacApp_Bovinova_Platform.Shared.Infrastructure.Media.Cloudinary;&#10;using VacApp_Bovinova_Platform.Shared.Infrastructure.Persistence.EFC.Configuration;&#10;using VacApp_Bovinova_Platform.Shared.Infrastructure.Persistence.EFC.Repositories;&#10;using VacApp_Bovinova_Platform.StaffAdministration.Application.Internal.CommandServices;&#10;using VacApp_Bovinova_Platform.StaffAdministration.Application.Internal.QueryServices;&#10;using VacApp_Bovinova_Platform.StaffAdministration.Domain.Repositories;&#10;using VacApp_Bovinova_Platform.StaffAdministration.Domain.Services;&#10;using VacApp_Bovinova_Platform.StaffAdministration.Infrastructure.Persistence.EFC.Repositories;&#10;using VacApp_Bovinova_Platform.VoiceCommand.Application.CommandServices;&#10;using VacApp_Bovinova_Platform.VoiceCommand.Application.QueryServices;&#10;using VacApp_Bovinova_Platform.VoiceCommand.Domain.Repositories;&#10;using VacApp_Bovinova_Platform.VoiceCommand.Domain.Services;&#10;using VacApp_Bovinova_Platform.VoiceCommand.Infrastructure.Parser;&#10;using VacApp_Bovinova_Platform.VoiceCommand.Infrastructure.Persistence.EFC.Repositories;&#10;using VacApp_Bovinova_Platform.VoiceCommand.Infrastructure.Speech;&#10;&#10;var builder = WebApplication.CreateBuilder(args);&#10;&#10;// Add services to the container.&#10;&#10;//configure Lower Case URLs&#10;builder.Services.AddRouting(options =&gt; options.LowercaseUrls = true);&#10;&#10;// Configure Kebab Case Route Naming Convention&#10;builder.Services.AddControllers(options =&gt; options.Conventions.Add(new KebabCaseRouteNamingConvention()));&#10;&#10;// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle&#10;builder.Services.AddEndpointsApiExplorer();&#10;&#10;// Configure Mapper for switching between admin and user resources of the ranch, campaign and staff management&#10;builder.Services.AddHttpContextAccessor();&#10;&#10;// Configure Swagger/OpenAPI&#10;builder.Services.AddSwaggerGen(options =&gt;&#10;{&#10;    options.EnableAnnotations();&#10;    &#10;    // API Information&#10;    options.SwaggerDoc(&quot;v1&quot;, new OpenApiInfo&#10;    {&#10;        Title = &quot;VacApp Bovinova Platform API&quot;,&#10;        Version = &quot;v1&quot;,&#10;        Description = &quot;Comprehensive API for ranch management, vaccination campaigns, livestock tracking, and staff administration&quot;,&#10;        TermsOfService = new Uri(&quot;https://vacapp.com/terms&quot;),&#10;        Contact = new OpenApiContact&#10;        {&#10;            Name = &quot;VacApp Support Team&quot;,&#10;            Email = &quot;support@vacapp.com&quot;,&#10;            Url = new Uri(&quot;https://vacapp.com/contact&quot;)&#10;        },&#10;        License = new OpenApiLicense&#10;        {&#10;            Name = &quot;MIT License&quot;,&#10;            Url = new Uri(&quot;https://opensource.org/licenses/MIT&quot;)&#10;        }&#10;    });&#10;&#10;    // JWT Bearer Authentication Definition&#10;    options.AddSecurityDefinition(&quot;Bearer&quot;, new OpenApiSecurityScheme&#10;    {&#10;        Description = @&quot;JWT Authorization header using the Bearer scheme. &#10;                      Enter 'Bearer' [space] and then your token in the text input below.&quot;,&#10;        Name = &quot;Authorization&quot;,&#10;        In = ParameterLocation.Header,&#10;        Type = SecuritySchemeType.Http,&#10;        Scheme = &quot;bearer&quot;,&#10;        BearerFormat = &quot;JWT&quot;&#10;    });&#10;&#10;    // Global Security Requirement&#10;    options.AddSecurityRequirement(new OpenApiSecurityRequirement&#10;    {&#10;        {&#10;            new OpenApiSecurityScheme&#10;            {&#10;                Reference = new OpenApiReference&#10;                {&#10;                    Type = ReferenceType.SecurityScheme,&#10;                    Id = &quot;Bearer&quot;&#10;                }&#10;            },&#10;            []&#10;        }&#10;    });&#10;});&#10;&#10;/////////////////////////Begin Database Configuration/////////////////////////&#10;// Add DbContext&#10;var connectionString = builder.Configuration.GetConnectionString(&quot;DefaultConnection&quot;);&#10;&#10;// Verify Database Connection string&#10;if (connectionString is null)&#10;    throw new Exception(&quot;Database connection string is not set&quot;);&#10;&#10;// Configure Database Context and Logging Levels&#10;if (builder.Environment.IsDevelopment())&#10;    builder.Services.AddDbContext&lt;AppDbContext&gt;(&#10;        options =&gt;&#10;        {&#10;            options.UseMySQL(connectionString)&#10;                .EnableSensitiveDataLogging()&#10;                .EnableDetailedErrors();&#10;        });&#10;else if (builder.Environment.IsProduction())&#10;    builder.Services.AddDbContext&lt;AppDbContext&gt;(&#10;        options =&gt;&#10;        {&#10;            options.UseMySQL(connectionString)&#10;                .LogTo(Console.WriteLine, LogLevel.Error)&#10;                .EnableDetailedErrors();&#10;        });&#10;&#10;// Configure Swagger to show SQL queries in Development&#10;builder.Services.AddLogging(config =&gt;&#10;{&#10;    config.AddConsole();&#10;    config.AddDebug();&#10;});&#10;&#10;// Add CORS Policy&#10;builder.Services.AddCors(options =&gt;&#10;{&#10;    options.AddPolicy(&quot;AllowAllPolicy&quot;,&#10;        policy =&gt; policy.AllowAnyOrigin()&#10;            .AllowAnyMethod()&#10;            .AllowAnyHeader());&#10;});&#10;&#10;// Configure Dependency Injection&#10;&#10;// Shared Bounded Context Injection Configuration&#10;builder.Services.AddScoped&lt;IUnitOfWork, UnitOfWork&gt;();&#10;builder.Services.AddScoped&lt;IMediaStorageService, CloudinaryService&gt;();&#10;&#10;// Bounded Context Injection Configuration for Business&#10;&#10;//IAM BC&#10;builder.Services.AddScoped&lt;IUserRepostory, UserRepository&gt;();&#10;builder.Services.AddScoped&lt;IUserCommandService, UserCommandService&gt;();&#10;builder.Services.AddScoped&lt;IUserQueryService, UserQueryService&gt;();&#10;builder.Services.AddScoped&lt;IHashingService, HashingService&gt;();&#10;builder.Services.AddScoped&lt;ITokenService, TokenService&gt;();&#10;builder.Services.Configure&lt;TokenSettings&gt;(builder.Configuration.GetSection(&quot;TokenSettings&quot;));&#10;builder.Services.AddScoped&lt;IAdminRepository, AdminRepository&gt;();&#10;builder.Services.AddScoped&lt;IAdminCommandService, AdminCommandService&gt;();&#10;builder.Services.AddScoped&lt;IAdminQueryService, AdminQueryService&gt;();&#10;&#10;//Ranch Management BC&#10;builder.Services.AddScoped&lt;IBovineRepository, BovineRepository&gt;();&#10;builder.Services.AddScoped&lt;IBovineQueryService, BovineQueryService&gt;();&#10;builder.Services.AddScoped&lt;IBovineCommandService, BovineCommandService&gt;();&#10;builder.Services.AddScoped&lt;IVaccineRepository, VaccineRepository&gt;();&#10;builder.Services.AddScoped&lt;IVaccineQueryService, VaccineQueryService&gt;();&#10;builder.Services.AddScoped&lt;IVaccineCommandService, VaccineCommandService&gt;();&#10;builder.Services.AddScoped&lt;IStableRepository, StableRepository&gt;();&#10;builder.Services.AddScoped&lt;IStableQueryService, StableQueryService&gt;();&#10;builder.Services.AddScoped&lt;IStableCommandService, StableCommandService&gt;();&#10;&#10;//Staff Administration BC&#10;builder.Services.AddScoped&lt;IStaffRepository, StaffRepository&gt;();&#10;builder.Services.AddScoped&lt;IStaffQueryService, StaffQueryService&gt;();&#10;builder.Services.AddScoped&lt;IStaffCommandService, StaffCommandService&gt;();&#10;&#10;//Campaign Management BC&#10;builder.Services.AddScoped&lt;ICampaignRepository, CampaignRepository&gt;();&#10;builder.Services.AddScoped&lt;ICampaignCommandService, CampaignCommandService&gt;();&#10;builder.Services.AddScoped&lt;ICampaignQueryService, CampaignQueryService&gt;();&#10;&#10;// Voice Command BC&#10;builder.Services.AddScoped&lt;IVoiceSpeechService, AzureSpeechService&gt;();&#10;builder.Services.AddScoped&lt;IVoiceParserService, VoiceParserService&gt;();&#10;builder.Services.AddScoped&lt;IVoiceCommandService, VoiceCommandService&gt;();&#10;builder.Services.AddScoped&lt;IVoiceQueryService, VoiceQueryService&gt;();&#10;builder.Services.AddScoped&lt;IVoiceTextToSpeechService, AzureTextToSpeechService&gt;();&#10;builder.Services.AddScoped&lt;IVoiceRepository, VoiceRepository&gt;();&#10;&#10;&#10;/////////////////////////End Database Configuration/////////////////////////&#10;&#10;// Configure Authentication &amp; Authorization&#10;builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)&#10;    .AddJwtBearer(options =&gt;&#10;    {&#10;        options.TokenValidationParameters = new TokenValidationParameters&#10;        {&#10;            ValidateIssuer = false,&#10;            ValidateAudience = false,&#10;            ValidateLifetime = true,&#10;            ValidateIssuerSigningKey = true,&#10;            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration[&quot;TokenSettings:Secret&quot;] ?? string.Empty)),&#10;            ClockSkew = TimeSpan.Zero&#10;        };&#10;    });&#10;&#10;builder.Services.AddAuthorization();&#10;&#10;var app = builder.Build();&#10;&#10;// Verify Database Objects are created&#10;using (var scope = app.Services.CreateScope())&#10;{&#10;    var services = scope.ServiceProvider;&#10;    var context = services.GetRequiredService&lt;AppDbContext&gt;();&#10;    context.Database.EnsureCreated();&#10;}&#10;&#10;// Configure the HTTP request pipeline.&#10;if (app.Environment.IsDevelopment() || app.Environment.IsProduction())&#10;{&#10;    app.UseSwagger();&#10;    app.UseSwaggerUI();&#10;}&#10;&#10;app.UseCors(&quot;AllowAllPolicy&quot;);&#10;&#10;app.UseHttpsRedirection();&#10;&#10;app.UseAuthentication();&#10;&#10;app.UseAuthorization();&#10;&#10;app.MapControllers();&#10;&#10;app.Run();" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore;&#10;using Microsoft.AspNetCore.Authentication.JwtBearer;&#10;using Microsoft.IdentityModel.Tokens;&#10;using System.Text;&#10;using Microsoft.OpenApi.Models;&#10;using VacApp_Bovinova_Platform.CampaignManagement.Application.Internal.CommandServices;&#10;using VacApp_Bovinova_Platform.CampaignManagement.Application.Internal.QueryServices;&#10;using VacApp_Bovinova_Platform.CampaignManagement.Domain.Repositories;&#10;using VacApp_Bovinova_Platform.CampaignManagement.Domain.Services;&#10;using VacApp_Bovinova_Platform.CampaignManagement.Infrastructure.Repositories;&#10;using VacApp_Bovinova_Platform.IAM.Application.CommandServices;&#10;using VacApp_Bovinova_Platform.IAM.Application.OutBoundServices;&#10;using VacApp_Bovinova_Platform.IAM.Application.QueryServices;&#10;using VacApp_Bovinova_Platform.IAM.Domain.Repositories;&#10;using VacApp_Bovinova_Platform.IAM.Domain.Services;&#10;using VacApp_Bovinova_Platform.IAM.Infrastructure.Hashing.BCrypt.Services;&#10;using VacApp_Bovinova_Platform.IAM.Infrastructure.Repositories;&#10;using VacApp_Bovinova_Platform.IAM.Infrastructure.Tokens.JWT.Configuration;&#10;using VacApp_Bovinova_Platform.IAM.Infrastructure.Tokens.JWT.Services;&#10;using VacApp_Bovinova_Platform.RanchManagement.Application.Internal.CommandServices;&#10;using VacApp_Bovinova_Platform.RanchManagement.Application.Internal.QueryServices;&#10;using VacApp_Bovinova_Platform.RanchManagement.Domain.Repositories;&#10;using VacApp_Bovinova_Platform.RanchManagement.Domain.Services;&#10;using VacApp_Bovinova_Platform.RanchManagement.Infrastructure.Persistence.EFC.Repositories;&#10;using VacApp_Bovinova_Platform.Shared.Application.OutboundServices;&#10;using VacApp_Bovinova_Platform.Shared.Domain.Repositories;&#10;using VacApp_Bovinova_Platform.Shared.Infrastructure.Interfaces.ASAP.Configuration;&#10;using VacApp_Bovinova_Platform.Shared.Infrastructure.Media.Cloudinary;&#10;using VacApp_Bovinova_Platform.Shared.Infrastructure.Persistence.EFC.Configuration;&#10;using VacApp_Bovinova_Platform.Shared.Infrastructure.Persistence.EFC.Repositories;&#10;using VacApp_Bovinova_Platform.StaffAdministration.Application.Internal.CommandServices;&#10;using VacApp_Bovinova_Platform.StaffAdministration.Application.Internal.QueryServices;&#10;using VacApp_Bovinova_Platform.StaffAdministration.Domain.Repositories;&#10;using VacApp_Bovinova_Platform.StaffAdministration.Domain.Services;&#10;using VacApp_Bovinova_Platform.StaffAdministration.Infrastructure.Persistence.EFC.Repositories;&#10;using VacApp_Bovinova_Platform.VoiceCommand.Application.CommandServices;&#10;using VacApp_Bovinova_Platform.VoiceCommand.Application.QueryServices;&#10;using VacApp_Bovinova_Platform.VoiceCommand.Domain.Repositories;&#10;using VacApp_Bovinova_Platform.VoiceCommand.Domain.Services;&#10;using VacApp_Bovinova_Platform.VoiceCommand.Infrastructure.Parser;&#10;using VacApp_Bovinova_Platform.VoiceCommand.Infrastructure.Persistence.EFC.Repositories;&#10;using VacApp_Bovinova_Platform.VoiceCommand.Infrastructure.Speech;&#10;using MySql.Data.MySqlClient;&#10;&#10;var builder = WebApplication.CreateBuilder(args);&#10;&#10;// Add services to the container.&#10;&#10;//configure Lower Case URLs&#10;builder.Services.AddRouting(options =&gt; options.LowercaseUrls = true);&#10;&#10;// Configure Kebab Case Route Naming Convention&#10;builder.Services.AddControllers(options =&gt; options.Conventions.Add(new KebabCaseRouteNamingConvention()));&#10;&#10;// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle&#10;builder.Services.AddEndpointsApiExplorer();&#10;&#10;// Configure Mapper for switching between admin and user resources of the ranch, campaign and staff management&#10;builder.Services.AddHttpContextAccessor();&#10;&#10;// Configure Swagger/OpenAPI&#10;builder.Services.AddSwaggerGen(options =&gt;&#10;{&#10;    options.EnableAnnotations();&#10;    &#10;    // API Information&#10;    options.SwaggerDoc(&quot;v1&quot;, new OpenApiInfo&#10;    {&#10;        Title = &quot;VacApp Bovinova Platform API&quot;,&#10;        Version = &quot;v1&quot;,&#10;        Description = &quot;Comprehensive API for ranch management, vaccination campaigns, livestock tracking, and staff administration&quot;,&#10;        TermsOfService = new Uri(&quot;https://vacapp.com/terms&quot;),&#10;        Contact = new OpenApiContact&#10;        {&#10;            Name = &quot;VacApp Support Team&quot;,&#10;            Email = &quot;support@vacapp.com&quot;,&#10;            Url = new Uri(&quot;https://vacapp.com/contact&quot;)&#10;        },&#10;        License = new OpenApiLicense&#10;        {&#10;            Name = &quot;MIT License&quot;,&#10;            Url = new Uri(&quot;https://opensource.org/licenses/MIT&quot;)&#10;        }&#10;    });&#10;&#10;    // JWT Bearer Authentication Definition&#10;    options.AddSecurityDefinition(&quot;Bearer&quot;, new OpenApiSecurityScheme&#10;    {&#10;        Description = @&quot;JWT Authorization header using the Bearer scheme. &#10;                      Enter 'Bearer' [space] and then your token in the text input below.&quot;,&#10;        Name = &quot;Authorization&quot;,&#10;        In = ParameterLocation.Header,&#10;        Type = SecuritySchemeType.Http,&#10;        Scheme = &quot;bearer&quot;,&#10;        BearerFormat = &quot;JWT&quot;&#10;    });&#10;&#10;    // Global Security Requirement&#10;    options.AddSecurityRequirement(new OpenApiSecurityRequirement&#10;    {&#10;        {&#10;            new OpenApiSecurityScheme&#10;            {&#10;                Reference = new OpenApiReference&#10;                {&#10;                    Type = ReferenceType.SecurityScheme,&#10;                    Id = &quot;Bearer&quot;&#10;                }&#10;            },&#10;            []&#10;        }&#10;    });&#10;});&#10;&#10;/////////////////////////Begin Database Configuration/////////////////////////&#10;// Add DbContext&#10;var connectionString = builder.Configuration.GetConnectionString(&quot;DefaultConnection&quot;);&#10;&#10;// Verify Database Connection string&#10;if (connectionString is null)&#10;    throw new Exception(&quot;Database connection string is not set&quot;);&#10;&#10;// Log seguro de cadena de conexión activa (sin password)&#10;try&#10;{&#10;    var csb = new MySqlConnectionStringBuilder(connectionString);&#10;    Console.WriteLine($&quot;DB -&gt; Env={builder.Environment.EnvironmentName}, Host={csb.Server}, Port={csb.Port}, Database={csb.Database}, User={csb.UserID}&quot;);&#10;}&#10;catch (Exception ex)&#10;{&#10;    Console.WriteLine($&quot;DB -&gt; No se pudo parsear la cadena de conexión: {ex.Message}&quot;);&#10;}&#10;&#10;// Configure Database Context and Logging Levels&#10;if (builder.Environment.IsDevelopment())&#10;    builder.Services.AddDbContext&lt;AppDbContext&gt;(&#10;        options =&gt;&#10;        {&#10;            options.UseMySQL(connectionString)&#10;                .EnableSensitiveDataLogging()&#10;                .EnableDetailedErrors();&#10;        });&#10;else if (builder.Environment.IsProduction())&#10;    builder.Services.AddDbContext&lt;AppDbContext&gt;(&#10;        options =&gt;&#10;        {&#10;            options.UseMySQL(connectionString)&#10;                .LogTo(Console.WriteLine, LogLevel.Error)&#10;                .EnableDetailedErrors();&#10;        });&#10;&#10;// Configure Swagger to show SQL queries in Development&#10;builder.Services.AddLogging(config =&gt;&#10;{&#10;    config.AddConsole();&#10;    config.AddDebug();&#10;});&#10;&#10;// Add CORS Policy&#10;builder.Services.AddCors(options =&gt;&#10;{&#10;    options.AddPolicy(&quot;AllowAllPolicy&quot;,&#10;        policy =&gt; policy.AllowAnyOrigin()&#10;            .AllowAnyMethod()&#10;            .AllowAnyHeader());&#10;});&#10;&#10;// Configure Dependency Injection&#10;&#10;// Shared Bounded Context Injection Configuration&#10;builder.Services.AddScoped&lt;IUnitOfWork, UnitOfWork&gt;();&#10;builder.Services.AddScoped&lt;IMediaStorageService, CloudinaryService&gt;();&#10;&#10;// Bounded Context Injection Configuration for Business&#10;&#10;//IAM BC&#10;builder.Services.AddScoped&lt;IUserRepostory, UserRepository&gt;();&#10;builder.Services.AddScoped&lt;IUserCommandService, UserCommandService&gt;();&#10;builder.Services.AddScoped&lt;IUserQueryService, UserQueryService&gt;();&#10;builder.Services.AddScoped&lt;IHashingService, HashingService&gt;();&#10;builder.Services.AddScoped&lt;ITokenService, TokenService&gt;();&#10;builder.Services.Configure&lt;TokenSettings&gt;(builder.Configuration.GetSection(&quot;TokenSettings&quot;));&#10;builder.Services.AddScoped&lt;IAdminRepository, AdminRepository&gt;();&#10;builder.Services.AddScoped&lt;IAdminCommandService, AdminCommandService&gt;();&#10;builder.Services.AddScoped&lt;IAdminQueryService, AdminQueryService&gt;();&#10;&#10;//Ranch Management BC&#10;builder.Services.AddScoped&lt;IBovineRepository, BovineRepository&gt;();&#10;builder.Services.AddScoped&lt;IBovineQueryService, BovineQueryService&gt;();&#10;builder.Services.AddScoped&lt;IBovineCommandService, BovineCommandService&gt;();&#10;builder.Services.AddScoped&lt;IVaccineRepository, VaccineRepository&gt;();&#10;builder.Services.AddScoped&lt;IVaccineQueryService, VaccineQueryService&gt;();&#10;builder.Services.AddScoped&lt;IVaccineCommandService, VaccineCommandService&gt;();&#10;builder.Services.AddScoped&lt;IStableRepository, StableRepository&gt;();&#10;builder.Services.AddScoped&lt;IStableQueryService, StableQueryService&gt;();&#10;builder.Services.AddScoped&lt;IStableCommandService, StableCommandService&gt;();&#10;&#10;//Staff Administration BC&#10;builder.Services.AddScoped&lt;IStaffRepository, StaffRepository&gt;();&#10;builder.Services.AddScoped&lt;IStaffQueryService, StaffQueryService&gt;();&#10;builder.Services.AddScoped&lt;IStaffCommandService, StaffCommandService&gt;();&#10;&#10;//Campaign Management BC&#10;builder.Services.AddScoped&lt;ICampaignRepository, CampaignRepository&gt;();&#10;builder.Services.AddScoped&lt;ICampaignCommandService, CampaignCommandService&gt;();&#10;builder.Services.AddScoped&lt;ICampaignQueryService, CampaignQueryService&gt;();&#10;&#10;// Voice Command BC&#10;builder.Services.AddScoped&lt;IVoiceSpeechService, AzureSpeechService&gt;();&#10;builder.Services.AddScoped&lt;IVoiceParserService, VoiceParserService&gt;();&#10;builder.Services.AddScoped&lt;IVoiceCommandService, VoiceCommandService&gt;();&#10;builder.Services.AddScoped&lt;IVoiceQueryService, VoiceQueryService&gt;();&#10;builder.Services.AddScoped&lt;IVoiceTextToSpeechService, AzureTextToSpeechService&gt;();&#10;builder.Services.AddScoped&lt;IVoiceRepository, VoiceRepository&gt;();&#10;&#10;&#10;/////////////////////////End Database Configuration/////////////////////////&#10;&#10;// Configure Authentication &amp; Authorization&#10;builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)&#10;    .AddJwtBearer(options =&gt;&#10;    {&#10;        options.TokenValidationParameters = new TokenValidationParameters&#10;        {&#10;            ValidateIssuer = false,&#10;            ValidateAudience = false,&#10;            ValidateLifetime = true,&#10;            ValidateIssuerSigningKey = true,&#10;            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration[&quot;TokenSettings:Secret&quot;] ?? string.Empty)),&#10;            ClockSkew = TimeSpan.Zero&#10;        };&#10;    });&#10;&#10;builder.Services.AddAuthorization();&#10;&#10;var app = builder.Build();&#10;&#10;// Verify Database Objects are created&#10;using (var scope = app.Services.CreateScope())&#10;{&#10;    var services = scope.ServiceProvider;&#10;    var context = services.GetRequiredService&lt;AppDbContext&gt;();&#10;    context.Database.EnsureCreated();&#10;}&#10;&#10;// Configure the HTTP request pipeline.&#10;if (app.Environment.IsDevelopment() || app.Environment.IsProduction())&#10;{&#10;    app.UseSwagger();&#10;    app.UseSwaggerUI();&#10;}&#10;&#10;app.UseCors(&quot;AllowAllPolicy&quot;);&#10;&#10;app.UseHttpsRedirection();&#10;&#10;app.UseAuthentication();&#10;&#10;app.UseAuthorization();&#10;&#10;app.MapControllers();&#10;&#10;app.Run();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/VacApp-Bovinova-Platform/appsettings.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/VacApp-Bovinova-Platform/appsettings.json" />
              <option name="originalContent" value="{&#10;  &quot;ConnectionStrings&quot;: {&#10;    &quot;DefaultConnection&quot;: &quot;server=db-vac-app-v2.mysql.database.azure.com;database=vac_app;user=admin;password=Vacapp1234;&quot;&#10;  },&#10;  &quot;Logging&quot;: {&#10;    &quot;LogLevel&quot;: {&#10;      &quot;Default&quot;: &quot;Information&quot;,&#10;      &quot;Microsoft.AspNetCore&quot;: &quot;Warning&quot;&#10;    }&#10;  },&#10;  &quot;TokenSettings&quot;: {&#10;    &quot;Secret&quot;: &quot;83e36f6c0c9ee0da7d63d58a75146ba20b287fb2fbd8c95444b35f302297c6d5&quot;&#10;  },&#10;  &quot;AzureSpeech&quot;: {&#10;    &quot;SubscriptionKey&quot;: &quot;9TXxySrWd6cHuEdxbJ9Zkz1mM8E6J0cc7vpAmKx5QEOztLYOoLmjJQQJ99BHACYeBjFXJ3w3AAAYACOG43L7&quot;,&#10;    &quot;Region&quot;: &quot;eastus&quot;&#10;  },&#10;  &quot;AllowedHosts&quot;: &quot;*&quot;&#10;}" />
              <option name="updatedContent" value="{&#10;  &quot;ConnectionStrings&quot;: {&#10;    &quot;DefaultConnection&quot;: &quot;Server=vacappserver.mysql.database.azure.com;Port=3306;Database=vac_app;User Id=user_admin;Password=Vacapp1234;SslMode=Required;AllowPublicKeyRetrieval=True;&quot;&#10;  },&#10;  &quot;Logging&quot;: {&#10;    &quot;LogLevel&quot;: {&#10;      &quot;Default&quot;: &quot;Information&quot;,&#10;      &quot;Microsoft.AspNetCore&quot;: &quot;Warning&quot;&#10;    }&#10;  },&#10;  &quot;TokenSettings&quot;: {&#10;    &quot;Secret&quot;: &quot;83e36f6c0c9ee0da7d63d58a75146ba20b287fb2fbd8c95444b35f302297c6d5&quot;&#10;  },&#10;  &quot;AzureSpeech&quot;: {&#10;    &quot;SubscriptionKey&quot;: &quot;9TXxySrWd6cHuEdxbJ9Zkz1mM8E6J0cc7vpAmKx5QEOztLYOoLmjJQQJ99BHACYeBjFXJ3w3AAAYACOG43L7&quot;,&#10;    &quot;Region&quot;: &quot;eastus&quot;&#10;  },&#10;  &quot;AllowedHosts&quot;: &quot;*&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>